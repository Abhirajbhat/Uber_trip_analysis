# -*- coding: utf-8 -*-
"""Uber_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VBrDgBQqTEecYXvanTPRxLxLosa7kxTu
"""

#Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""Data Preprocessing"""

uber_data=pd.read_csv('/content/Uber-Jan-Feb-FOIL.csv')
uber_data.head(20)

uber_data.info()

uber_data.describe()

uber_data.isnull().sum()

df=uber_data

df['date']=pd.to_datetime(df['date'])

#checking missing value
print(df.isnull().sum())

#drop any duplicates
df=df.drop_duplicates()

#Sort by Date
df=df.sort_values(by='date')

#creating new features for analysis
df['day'] = df['date'].dt.day
df['month'] = df['date'].dt.month
df['weekday'] = df['date'].dt.day_name()
df['trips_per_vehicle'] = df['trips'] / df['active_vehicles']

#printing dataset after preprocessing
df.head(20)

"""Exploratory Data Analysis (EDA)"""

# 1. Trips over time
plt.figure(figsize=(12,6))
plt.plot(df['date'], df['trips'], label="Trips", color="blue")
plt.title("Uber Trips Over Time (Jan-Feb)")
plt.xlabel("Date")
plt.ylabel("Number of Trips")
plt.legend()
plt.show()

# 2. Active vehicles over time
plt.figure(figsize=(12,6))
plt.plot(df['date'], df['active_vehicles'], label="Active Vehicles", color="green")
plt.title("Active Vehicles Over Time (Jan-Feb)")
plt.xlabel("Date")
plt.ylabel("Active Vehicles")
plt.legend()
plt.show()

# 3. Average trips per vehicle by weekday
plt.figure(figsize=(10,6))
sns.barplot(x="weekday", y="trips_per_vehicle", data=df, order=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],color="yellow")
plt.title("Average Trips per Vehicle by Weekday")
plt.xticks(rotation=45)
plt.show()

# 4. Correlation heatmap
plt.figure(figsize=(8,6))
sns.heatmap(df[['trips','active_vehicles','trips_per_vehicle']].corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

# 5. Trips distribution
plt.figure(figsize=(10,6))
sns.histplot(df['trips'], bins=30, kde=True, color="purple")
plt.title("Distribution of Trips")
plt.xlabel("Trips")
plt.show()

"""Feature Engineering

"""

# Lag features (yesterdayâ€™s trips & vehicles)
df['trips_lag1'] = df['trips'].shift(1)
df['vehicles_lag1'] = df['active_vehicles'].shift(1)

# Rolling averages (last 7 days trend)
df['trips_rolling7'] = df['trips'].rolling(window=7).mean()
df['vehicles_rolling7'] = df['active_vehicles'].rolling(window=7).mean()

# Weekend feature
df['is_weekend'] = df['weekday'].isin(['Saturday','Sunday']).astype(int)

# Month name
df['month_name'] = df['date'].dt.month_name()

# Drop missing values from rolling/lag
df = df.dropna()

print("Engineered Features:")
df.head(20)

"""Model Building

"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Select features & target
features = ['active_vehicles', 'trips_lag1', 'vehicles_lag1',
            'trips_rolling7', 'vehicles_rolling7', 'is_weekend']
target = 'trips'

X = df[features]
y = df[target]

# Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print("Model Performance:")
print("MAE:", mae)
print("RMSE:", rmse)
print("R2 Score:", r2)

"""Model Evaluation (visualization)"""

# 1. Actual vs Predicted Plot
plt.figure(figsize=(10,6))
plt.plot(y_test.values, label="Actual Trips", marker='o')
plt.plot(y_pred, label="Predicted Trips", marker='x')
plt.title("Actual vs Predicted Trips")
plt.xlabel("Test Samples")
plt.ylabel("Trips")
plt.legend()
plt.show()

# 2. Scatter Plot (Predicted vs Actual)
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred, color="purple")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # perfect prediction line
plt.title("Predicted vs Actual Trips")
plt.xlabel("Actual Trips")
plt.ylabel("Predicted Trips")
plt.show()

# 3. Residual Plot
residuals = y_test - y_pred
plt.figure(figsize=(8,6))
sns.histplot(residuals, kde=True, color="orange")
plt.title("Residual Distribution (Errors)")
plt.xlabel("Residuals")
plt.show()

# 4. Feature Importance (Coefficients)
coef_df = pd.DataFrame({"Feature": features, "Coefficient": model.coef_})
plt.figure(figsize=(10,6))
sns.barplot(x="Coefficient", y="Feature", data=coef_df, hue="Feature", palette="viridis", legend=False)
plt.title("Feature Importance (Linear Regression Coefficients)")
plt.show()